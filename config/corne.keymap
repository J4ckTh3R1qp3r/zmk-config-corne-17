/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

&mt {
    flavor = "tap-preferred";
};

/ {
        chosen {
                zmk,matrix_transform = &five_column_transform;
                zmk,battery = &vbatt;
        };
        vbatt: vbatt {
                compatible = "zmk,battery-nrf-vddh";
                label = "VBATT";
        };
        behaviors {
                l1s: tap_dance_mod_tap_3 {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&mo 1>, <&kp RET>;
                };
                td0: tap_dance_0 {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp N1>, <&kp N2>, <&kp N3>;
                };
        };
        combos {
                compatible = "zmk,combos";
                combo_a_top {
                timeout-ms = <50>;
                key-positions = <2 17>;
                bindings = <&kp LA(W)>;
                };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
                        &mt LALT Q  &kp W       &kp E     &kp R     &kp T         &mt EXCL Y      &mt QUESTION U        &kp I                    &kp O                  &mt LEFT_BRACKET P
                        &mt LSHFT A &kp S       &kp D     &kp F     &kp G         &kp H           &kp J                 &kp K                    &kp L                  &mt SQT SEMI
                        &mt LCTRL Z &kp X       &kp C     &kp V     &kp B         &kp N           &mt RIGHT_BRACKET M   &mt LS(NUMBER_6) COMMA   &mt LS(NUMBER_7) DOT   &kp FSLH
                                                &l1s      &kp LGUI  &lt 2 SPACE   &lt 2 RET       &kp LSHFT             &mo 1
                        >;
                };
                lower_layer {
                        bindings = <
                        &kp LALT   &mt RG(PERIOD) NUMBER_7            &kp N8                       &kp N9                              &kp N0      &kp BACKSLASH       &kp LEFT_BRACKET      &kp RIGHT_BRACKET           &kp PERCENT            &kp RG(C_AL_LOCK)
                        &kp LSHFT  &mt RG(RS(RC(NUMBER_4))) NUMBER_4  &mt RG(RA(LEFT_BRACKET)) N5  &mt RG(RA(RIGHT_BRACKET)) NUMBER_6  &kp MINUS   &mt TILDE SQT       &kp LEFT_PARENTHESIS  &mt HASH RIGHT_PARENTHESIS  &mt CARET AMPERSAND    &kp DOLLAR
                        &kp LCTRL  &kp NUMBER_1                       &kp NUMBER_2                 &mt LS(A) NUMBER_3                  &kp EQUAL   &kp UNDER           &kp LEFT_BRACE        &kp RIGHT_BRACE             &kp SEMICOLON          &kp LG(SPACE)
                                                                      &trans                       &trans                              &trans      &trans              &trans                &trans
                        >;
                };
                raise_layer {
                        bindings = <
                        &kp LALT    &kp TAB               &kp UP_ARROW    &none                  &kp BACKSPACE        &kp C_MUTE         &kp C_VOLUME_DOWN &kp C_VOLUME_UP    &none            &kp BACKSPACE   
                        &kp LSHFT   &kp LEFT_ARROW        &kp DOWN_ARROW  &kp RIGHT_ARROW        &kp ESCAPE           &kp C_PLAY_PAUSE   &kp C_PREV        &kp C_NEXT         &none            &none  
                        &kp LCTRL   &none                 &trans          &trans                 &none                &none              &none             &none              &none            &none
                                                          &trans          &trans                 &trans               &trans             &trans            &trans
                        >;
                };
        };
};
